from aiogram.types import InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup
from sqlalchemy.ext.asyncio import AsyncSession

from tgbot.data.locale import LocaleManager
from tgbot.models.database.product import get_all_products, get_product_by_id, get_all_products_by_id
from tgbot.keyboards import generate
from tgbot.keyboards.query_cb import (ProductCallback, BackCallback,
                                      LanguageCallback, QuantityCallback,
                                      ShopCartCallback, PurchaseCallback)
from tgbot.data.locale import Lang


def phone_number_btn(lang):
    markup = ReplyKeyboardMarkup(
        row_width=2,
        resize_keyboard=True
    )
    markup.add(
        KeyboardButton(LocaleManager.get("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º", lang), request_contact=True)
    )
    return markup


def user_main_btns(lang):
    markup = ReplyKeyboardMarkup(
        row_width=2,
        resize_keyboard=True
    )
    btns = [LocaleManager.get("–ö–∞—Ç–∞–ª–æ–≥", lang),
            LocaleManager.get("FAQ", lang),
            LocaleManager.get("–ö–æ–Ω—Ç–∞–∫—Ç—ã", lang),
            LocaleManager.get("–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", lang),
            LocaleManager.get("–ö–æ—Ä–∑–∏–Ω–∞", lang)]
    for btn in btns:
        markup.add(
            btn
        )

    return markup


def get_orders():
    pass


async def get_product_btns(session: AsyncSession,
                           product_id: int,
                           action: str,
                           lang: str,
                           count: int = 0):
    markup = InlineKeyboardMarkup()
    product = await get_product_by_id(session, product_id)
    btns = {'‚¨ÖÔ∏è': QuantityCallback.new(
        turn=-1,
        product_id=product_id,
        action=action
    ), str(count): QuantityCallback.new(
        turn='-',
        product_id='-',
        action="-"
    ), '‚û°Ô∏è': QuantityCallback.new(
        turn=1,
        product_id=product_id,
        action=action
    ), f'‚¨ÖÔ∏è{LocaleManager.get("–ù–∞–∑–∞–¥", lang)}': BackCallback.new(
        level=f"1_{action}",
        action="back"
    ), f'‚¨ÖÔ∏è{LocaleManager.get("–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é", lang)}': BackCallback.new(
        level=0,
        action="back"
    )}

    order_btns = generate.GenerateMarkupButtons(
        laylout=[3, 1, 1],
        markup=markup,
        keyboards=[
            InlineKeyboardButton(
                text=t,
                callback_data=c
            ) for t, c in btns.items()
        ]
    ).get()
    return order_btns, product


async def get_products_btns(session: AsyncSession,
                            lang: str):
    markup = InlineKeyboardMarkup()
    products = await get_all_products(session)
    btns = {}
    for product in products:
        btns[LocaleManager.get(product.name, lang)] = ProductCallback.new(
            product_id=product.id,
            action="product"
        )
    btns[f'‚¨ÖÔ∏è{LocaleManager.get("–ù–∞–∑–∞–¥", lang)}'] = BackCallback.new(
            level=0,
            action="back"
    )
    return generate.GenerateMarkupButtons(
        laylout=1,
        markup=markup,
        keyboards=[
            InlineKeyboardButton(
                text=t,
                callback_data=c
            ) for t, c in btns.items()
        ]
    ).get()


async def get_shop_cart_btns(session: AsyncSession,
                             shop_cart: list,
                             counts: list,
                             lang: str):
    markup = InlineKeyboardMarkup()
    products = await get_all_products_by_id(session, shop_cart)
    btns = {}
    for i, product in enumerate(products):
        btns[f"{LocaleManager.get(product.name, lang)}"] = ShopCartCallback.new(
            product_id=product.id,
            count=counts[i],
            action="product"
        )
        btns[f"üóë{i + 1}({counts[i]} —à—Ç)"] = PurchaseCallback.new(
            shop_cart=product.id,
            action="remove"
        )
    btns[f'üõí{LocaleManager.get("–ö—É–ø–∏—Ç—å", lang)}'] = PurchaseCallback.new(
        shop_cart=[shop_cart, counts],
        action="purchase"
    )
    btns[f'üßπ{LocaleManager.get("–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", lang)}'] = PurchaseCallback.new(
        shop_cart=[shop_cart, counts],
        action="clear_cart"
    )
    btns[f'‚¨ÖÔ∏è{LocaleManager.get("–ù–∞–∑–∞–¥", lang)}'] = BackCallback.new(
            level=0,
            action="back"
    )
    return generate.GenerateMarkupButtons(
        laylout=[2] * len(counts) + [1] * 3,
        markup=markup,
        keyboards=[
            InlineKeyboardButton(
                text=t,
                callback_data=c
            ) for t, c in btns.items()
        ]
    ).get()


async def get_lang_btns(action: str):
    markup = InlineKeyboardMarkup()
    btns = {'–†—É—Å—Å–∫–∏–π': LanguageCallback.new(
        lang=Lang.RUS,
        action=action
    ), '–£–∑–±–µ–∫—Å–∫–∏–π': LanguageCallback.new(
        lang=Lang.UZB,
        action=action
    )}

    return generate.GenerateMarkupButtons(
        laylout=1,
        markup=markup,
        keyboards=[
            InlineKeyboardButton(
                text=t,
                callback_data=c
            ) for t, c in btns.items()
        ]
    ).get()


async def get_back_btns(lang: str):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(
        text=f"‚¨ÖÔ∏è{LocaleManager.get('–ù–∞–∑–∞–¥', lang)}",
        callback_data=BackCallback.new(
            level="2_cart",
            action="back"
        )
    ))
    markup.add(InlineKeyboardButton(
        text=f"‚¨ÖÔ∏è{LocaleManager.get('–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é', lang)}",
        callback_data=BackCallback.new(
            level=0,
            action="back"
        )
    ))
    return markup
